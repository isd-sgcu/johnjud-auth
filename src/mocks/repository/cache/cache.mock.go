// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/pkg/repository/cache/cache.repository.go

// Package mock_cache is a generated GoMock package.
package mock_cache

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddSetMember mocks base method.
func (m *MockRepository) AddSetMember(key string, value interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSetMember", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSetMember indicates an expected call of AddSetMember.
func (mr *MockRepositoryMockRecorder) AddSetMember(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSetMember", reflect.TypeOf((*MockRepository)(nil).AddSetMember), key, value)
}

// IsSetMember mocks base method.
func (m *MockRepository) IsSetMember(key string, value interface{}) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSetMember", key, value)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsSetMember indicates an expected call of IsSetMember.
func (mr *MockRepositoryMockRecorder) IsSetMember(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSetMember", reflect.TypeOf((*MockRepository)(nil).IsSetMember), key, value)
}
